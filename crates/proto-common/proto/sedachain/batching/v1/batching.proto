syntax = "proto3";
package sedachain.batching.v1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/sedaprotocol/seda-chain/x/batching/types";

// Batch is an aggregation of data request results along with validator
// signatures used to prove these results on destination chains.
message Batch {
  // batch_number is a unique identifier of the batch incremented
  // every time a batch is created.
  uint64 batch_number = 1;
  // block_height is the height at which the batch was created.
  int64 block_height = 2;
  // current_data_result_root is the hex-encoded root of the data result
  // merkle tree.
  string current_data_result_root = 3;
  // data_result_root is the hex-encoded "super root" of the previous
  // data result and current data result roots.
  string data_result_root = 4;
  // validator_root is the hex-encoded root of the validator merkle
  // tree.
  string validator_root = 5;
  // batch_id is the Keccack-256 hash of the batch content.
  bytes batch_id = 6;
  // proving_medatada is a field for additional proving data.
  bytes proving_medatada = 7;
}

// TreeEntries are the given batch's data result tree entries and
// validator tree entries.
message TreeEntries {
  // batch_number is the identifier of the batch the tree entries from.
  uint64 batch_number = 1;
  // data_result_entries are the entries (unhashed leaf contents) of
  // the data result tree.
  repeated bytes data_result_entries = 2;
  // validator_entries are the entries (unhashed leaf contents) of
  // the validator tree.
  repeated bytes validator_entries = 3;
}

// BatchSignatures contains basic validator data and its batch signatures
// under various cryptographic schemes.
message BatchSignatures {
  string validator_addr = 1
      [ (cosmos_proto.scalar) = "cosmos.ValidatorAddressString" ];
  bytes signatures = 2;
}

// Params is a list of parameters which can be changed through governance.
message Params {
  option (gogoproto.equal) = true;

  // validator_set_trim_percent is the percentage of the validator
  // set to store in the validator merkle tree in the batch.
  uint32 validator_set_trim_percent = 1;
}

// DataResult represents the result of a resolved data request.
message DataResult {
  // id is the Keccack-256 hash of the data result.
  string id = 1 [ (gogoproto.jsontag) = "id" ];
  // dr_id is the data request identifier.
  string dr_id = 2 [ (gogoproto.jsontag) = "dr_id" ];
  // version is a semantic version string.
  string version = 3 [ (gogoproto.jsontag) = "version" ];
  // block_height is the height at which the data request was tallied.
  uint64 block_height = 4 [ (gogoproto.jsontag) = "block_height" ];
  // exit_code is the exit code of the tally wasm binary execution.
  uint32 exit_code = 5 [ (gogoproto.jsontag) = "exit_code" ];
  // gas_used is the gas used by the data request execution.
  uint64 gas_used = 6 [ (gogoproto.jsontag) = "gas_used" ];
  // result is the result of the tally wasm binary execution.
  bytes result = 7 [ (gogoproto.jsontag) = "result" ];
  // payback_address is the payback address set by the relayer.
  string payback_address = 8 [ (gogoproto.jsontag) = "payback_address" ];
  // seda_payload is the payload set by SEDA Protocol (e.g. OEV-enabled
  // data requests)
  string seda_payload = 9 [ (gogoproto.jsontag) = "seda_payload" ];
  // consensus indicates whether consensus was reached in the tally
  // process.
  bool consensus = 10 [ (gogoproto.jsontag) = "consensus" ];
}
